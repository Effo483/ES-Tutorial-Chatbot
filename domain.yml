version: '2.0'
config:
  store_entities_as_slots: true
session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: false
intents:
- request_led_tutorial:
    use_entities: true
- faq:
    use_entities: true
- inform:
    use_entities: true
- deny:
    use_entities: true
- goodbye:
    use_entities: true
- greet:
    use_entities: true
- next:
    use_entities: true
- affirm:
    use_entities: true
- chitchat:
    use_entities: true
- request_button_tutorial:
    use_entities: true
- stop:
    use_entities: true
- controller_type:
    use_entities: true
- enquire:
    use_entities: true
- scope:
    use_entities: true
- nlu_fallback:
    use_entities: true
- out_of_scope:
    use_entities: true
- restart:
    use_entities: true
- request_setup_tutorial:
    use_entities: true
entities:
- controller_type
slots:
  setup_tutorial_next_step:
    type: rasa.shared.core.slots.FloatSlot
    initial_value: 0
    auto_fill: true
    influence_conversation: false
    max_value: 10.0
    min_value: 0.0
  start_setup_form:
    type: rasa.shared.core.slots.BooleanSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  button_tutorial_next_step:
    type: rasa.shared.core.slots.FloatSlot
    initial_value: 0
    auto_fill: true
    influence_conversation: false
    max_value: 10.0
    min_value: 0.0
  start_led_form:
    type: rasa.shared.core.slots.BooleanSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  led_tutorial_next_step:
    type: rasa.shared.core.slots.FloatSlot
    initial_value: 0
    auto_fill: true
    influence_conversation: false
    max_value: 10.0
    min_value: 0.0
  current_tutorial:
    type: rasa.shared.core.slots.TextSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  controller_type:
    type: rasa.shared.core.slots.TextSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  confirm:
    type: rasa.shared.core.slots.BooleanSlot
    initial_value: null
    auto_fill: true
    influence_conversation: false
  setup:
    type: rasa.shared.core.slots.BooleanSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  start_button_form:
    type: rasa.shared.core.slots.BooleanSlot
    initial_value: null
    auto_fill: true
    influence_conversation: true
  requested_slot:
    type: rasa.shared.core.slots.UnfeaturizedSlot
    initial_value: null
    auto_fill: true
    influence_conversation: false
responses:
  utter_greet:
  - text: Hi there, I am your virtual assistant. I can help you to build UML based programs using the SiSy tool. You can request a tutorial by typing the tutorial name.
  utter_tutorial_manual:
  - text: 'This is how it works: In the beginning of each tutorial I will ask you some questions about your controller type etc. After that, the first step of the tutorial will beginn. If you have trouble to complete the tutorial step you can ask me any of the listed questions. Otherwise you can write "next", "continue" or simply "nx" to get to the next step. If you have accidentally given wrong information or want to start over, you can reset the dialog by typing "restart".'
  utter_goodbye:
  - text: Bye
  utter_submit:
  - text: I have all the info I need, thanks!
  utter_scope:
  - text: You can ask me how to add a sensor or some questions about SiSy or embedded software.
  utter_ask_controller_type:
  - text: What kind of Microcontroller do you have? Atmega AVR, STM32 or XMC?
  utter_out_of_scope:
  - text: Sorry, I can't handel that request.
  utter_ask_rephrase:
  - text: I'm sorry, I didn't quite understand that. Could you rephrase?
  utter_default:
  - text: I'm sorry, I can't help you.
  utter_ask_setup:
  - text: Do you also need help with the initial setup?
  utter_faq/which_microcontrollers_do_you_support:
  - text: Currently I support AVR, STM32 and XMC.
  utter_faq/what_is_uml:
  - text: The Unified Modeling Language (UML) is a general-purpose, developmental, modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system.
  utter_faq/how_to_connect_classes:
  - text: Left click and hold on the bottom box of one class. Now drag the cursor to another class to make a connection.
  utter_faq/compile_error:
  - text: One possibility is to download PEC with examples when starting a new project. There you can look at pre build examples that work and look for differences.
  utter_faq/no_st_link:
  - text: Usually this problem occurs because of using a virtual machine and using windows on top of it, which leads to some confusions with the installed driver detection. Or even sometimes, it helps to connect the board and then restart the PC, instead of plugging the board while/after PC and/or software tool.
  utter_faq/what_is_realisation:
  - text: Realization is a specialized abstraction relationship between two sets of model elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client).
  utter_faq/what_is_aggregation:
  - text: An aggregation relationship can be described in simple words as an object of one class can own or access the objects of another class.
  utter_ask_start_setup_form:
  - text: This is the button tutorial. Do you want to start?
  utter_setup_avr_step_1:
  - text: 'Now lets start with the setup tutorial. Step 1: First you need to install SiSy Software. You can download it here: https://www.sisy.de/index.php?id=109. By the way, you can also find this tutorial here: http://avr-cpp.de/doku.php?id=grundstruktur'
  utter_setup_avr_step_2:
  - text: 'Step 2: Connect your myAVR board with ATmega8 via mini-USB to your PC.'
  utter_setup_avr_step_3:
  - image: https://i.imgur.com/o2E7NeT.jpg
    text: 'Step 3: Start SiSy and create a new project with the name "tutorial". Choose the AVR Vorgehensmodell and your corresponding hardware.'
  utter_setup_avr_step_4:
  - image: https://i.imgur.com/ziviCOd.jpg
    text: 'Step 4: Cancel the window about diagram templates and drag the "kleines Programm" icon into the working space. Give it a name, choose AVE C++ language and under the "Grundgerüst" tab choose "Einfaches Grundgerüst" and click on "Struktur laden".'
  utter_setup_avr_step_5:
  - image: https://i.imgur.com/rrRbAKY.jpg
    text: 'Step 5: Now you should see a window including a little code. You can now click on "kompilieren". After it is finished you can click on "linken" and after this is finished you can click on "brennen". The code does nothing yet but if no errors appear that is already great news!'
  utter_setup_stm_step_1:
  - text: 'Now lets start with the setup tutorial. Step 1: First you need to install SiSy Software. You can download it here: https://www.sisy.de/index.php?id=109. By the way, you can also find this tutorial here: http://mystm32.de/doku.php?id=grundstruktur_mit_uml'
  utter_setup_stm_step_2:
  - text: 'Step 2: Connect your board via mini-USB to your PC.'
  utter_setup_stm_step_3:
  - text: 'Step 3: Start SiSy and create a new project with the name "tutorial". Choose the ARM Vorgehensmodell and your corresponding hardware.'
  utter_setup_stm_step_4:
  - image: https://i.imgur.com/OC1xanR.jpg
    text: 'Step 4: From the lib store load PEC Framework - Portable Embedded Classes ohne Beispiele.'
  utter_setup_stm_step_5:
  - image: https://i.imgur.com/HpU18kI.jpg
    text: 'Step 5: Create a new class diagram by dragging the class icon into the working space. Choose ARM C++ as language, STM32F407 Discovery as hardware and ST-link2 as programmer. '
  utter_setup_stm_step_6:
  - image: https://i.imgur.com/q2NUFfh.jpg
    text: 'Step 6: Right click on the class diagram and left click on "nach unten". From the SiSy Libstore you can no download Application Grundgerüst für PEC Anwendungen (XMC, STM32, AVR). Assign the driver package for the controller MCU_STM32F4 to the diagram. You can find this package via the navigator (UML packages) or via the search function in the explorer.'
  utter_setup_stm_step_7:
  - image: https://i.imgur.com/qKvIKgK.jpg
    text: 'Step 7: You can now click on "Objektbibliothek" and then "Erstellen, brennen, ausführen". The code does nothing yet but if no errors appear that is already great news!'
  utter_setup_xmc_step_1:
  - text: 'Now lets start with the setup tutorial. Step 1: First you need to install SiSy Software. You can download it here: https://www.sisy.de/index.php?id=109. By the way, you can also find this tutorial here: http://www.myxmc.de/tutorial/doku.php?id=grundstruktur'
  utter_setup_xmc_step_2:
  - text: 'Step 2: Connect your board via mini-USB to your PC.'
  utter_setup_xmc_step_3:
  - image: https://i.imgur.com/o2E7NeT.jpg
    text: 'Step 3: Start SiSy and create a new project with the name "tutorial". Choose the AVR Vorgehensmodell and your corresponding hardware.'
  utter_setup_xmc_step_4:
  - image: https://i.imgur.com/ziviCOd.jpg
    text: 'Step 4: Cancel the window about diagram templates and drag the "kleines Programm" icon into the working space. Give it a name, choose AVE C++ language and under the "Grundgerüst" tab choose "Einfaches Grundgerüst" and click on "Struktur laden".'
  utter_setup_xmc_step_5:
  - text: 'Step 5: Right click on your class object and left click on "Definieren...". Under the Options tab you can choose XMC4500 Relax Kit.'
  utter_setup_xmc_step_6:
  - image: https://i.imgur.com/rrRbAKY.jpg
    text: 'Step 6: Now you should see a window including a little code. You can now click on "kompilieren". After it is finished you can click on "linken" and after this is finished you can click on "brennen". The code does nothing yet but if no errors appear that is already great news!'
  utter_successor_setup_tutorial:
  - text: The next tutorial is the LED tutorial. If you want to start it type "led stutorial"
  utter_faq/what_is_pull_up:
  - text: Open inputs are sensitive receivers for all kinds of electromagnetic waves. The input delivers virtually arbitrary signals. So-called pull-down or pull-up resistors provide a remedy here. These pull the line to a defined potential and thus suppress it. In the past, these pull-up resistors were explicitly built into the circuit (activated with a soldering iron, so to speak). Modern controllers have internal PullUp and PullDown resistors. If necessary, these simply have to be activated by software.
  utter_add_function_key:
  - text: ' Add function key class and connect it to the controller as aggregation. Use the explorer to search for PecPinOutput and drag it into the diagram. Connect it to FunctionKey as realisation. Use the explorer to search for pinPullup and drag it into the diagram. Connect it to FunctionKey as realisation. Use the explorer to search for pinA0 and drag it into the diagram. Connect it to FunctionKey as realisation. Add InficatorLED class and add connect it as aggreation to the Controller. Use the explorer to search for PinB0 and drag it into the diagram. Connect it to StatusLED as realisation. Add PecPinOutput and pinB0 and connect them as realisation to the IndicatorLED. '
  utter_affirm_blink:
  - text: ' if (functionKey.getState()==0) // AnzeigeLED blinkt indicatorLED.toggle(); waitMs(200); else   // SONST // AnzeigeLED aus indicatorLED.off(); '
  utter_ask_affirm_blink:
  - text: It is also possible to make the LED blink. You can use the methods indicatorLED.toggle() and waitMs(<time in ms>) for that. Give it a try! Do you want to see the solution?
  utter_led_step_1:
  - text: "Now let's start with the led tutorial. Step 1: Right-click on Navigator (Schnellzugriff) and click on UML-Pakete. Open ARMClasses. Choose Led and drag and drop to application area."
  utter_led_step_2:
  - image: https://i.imgur.com/jQJ0YeP.jpg
    text: 'Step 2: Connect the added LED class to the controller as aggregation (pointed, filled arrow).'
  utter_led_step_3:
  - text: 'Step 3: Use the explorer to search for PecPinOutput and drag it into the diagram. Connect it to StatusLED as realisation.'
  utter_led_step_4:
  - image: https://i.imgur.com/ztvV9WJ.jpg
    text: 'Step 4: Use the explorer to search for PinB0 and drag it into the diagram. Connect it to StatusLED as realisation.'
  utter_led_step_5:
  - image: https://i.imgur.com/Cv95a02.jpg
    text: 'Step 5: Overwrite the controlller method onWork() with the following two lines: statusLED.toggle(); waitMs(200);'
  utter_led_step_6:
  - text: 'Step 6: Now you can compile and flash the programm.'
  utter_successor_led_tutorial:
  - text: The next tutorial is the button tutorial. You can start it by typing "button tutorial".
  utter_ask_confirm_setup:
  - text: Was your setup successful? If not, please describe the problem. Maybe I can help.
  utter_congratulations:
  - text: Good job, you did it!
  utter_led_form_followup:
  - text: In another tutorial you can add a function key or button to activate and deactivate the LED. Do you want to continue with that?
  utter_what_next:
  - text: Alright. What do you want to do next?
  utter_cancel:
  - text: Okay, I will cancel this tutorial. What do you want to do next?
  utter_ask_start_button_form:
  - text: This is the LED + Button tutorial. Here you will build a program that lets you manipulate the LED with a button. Do you want to start?
  utter_button_step_1:
  - text: 'Step 1: Right-click on Navigator (Schnellzugriff) and click on UML-Pakete. Open ARMClasses. Choose function key and drag and drop to application area.'
  utter_button_step_2:
  - text: 'Step 2: Use the explorer to search for PecPinOutput and drag it into the diagram. Connect it to FunctionKey as realisation.'
  utter_button_step_3:
  - text: 'Step 3: Use the explorer to search for pinPullup and drag it into the diagram. Connect it to FunctionKey as realisation.'
  utter_button_step_4:
  - text: 'Step 4: Use the explorer to search for pinA0 and drag it into the diagram. Connect it to FunctionKey as realisation.'
  utter_button_step_5:
  - text: 'Step 5: Add IndicatorLED class and add connect it as aggreation to the Controller.'
  utter_button_step_6:
  - image: https://i.imgur.com/lOF6VeH.jpg
    text: 'Step 6: Add PecPinOutput and pinB0 and connect them as realisation to the IndicatorLED.'
  utter_successor_button_tutorial:
  - text: You have reached the end, congratulations! There are no further tutorials yet.
  no_active_tutorial:
  - text: No active tutorial. You can start a tutorial by typing the tutorial name.
  utter_restart:
  - text: The conversation including all state values were reset. Hello again!
actions:
- answer_scope
- dispatch_tutorials
- handle_button_tutorial
- handle_led_tutorial
- reset_all_slots
- restart
- tutorial_dispatcher
- utter_chitchat
- utter_faq
- utter_goodbye
- utter_greet
- utter_led_form_followup
- utter_tutorial_manual
- validate_led_form
- validate_controller_form
- handle_setup_tutorial
- submit_controller_form
forms:
  controller_form:
    required_slots:
      controller_type:
      - entity: controller_type
        type: from_entity
  led_tutorial_form:
    required_slots:
      controller_type:
      - entity: controller_type
        type: from_entity
      start_led_form:
      - intent: affirm
        type: from_intent
        value: true
      - intent: deny
        type: from_intent
        value: false
  button_tutorial_form:
    required_slots:
      controller_type:
      - entity: controller_type
        type: from_entity
      start_button_form:
      - intent: affirm
        type: from_intent
        value: true
      - intent: deny
        type: from_intent
        value: false
e2e_actions: []
